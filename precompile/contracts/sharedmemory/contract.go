// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package sharedmemory

import (
	"context"
	"fmt"
	"math/big"

	"github.com/ava-labs/avalanchego/ids"
	"github.com/ava-labs/avalanchego/vms/components/avax"
	"github.com/ava-labs/avalanchego/vms/components/verify"
	"github.com/ava-labs/avalanchego/vms/secp256k1fx"
	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/utils/codec"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 0 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	ExportAVAXGasCost            uint64 = contract.WriteGasCostPerSlot + contract.ReadGasCostPerSlot
	ExportUTXOGasCost            uint64 = contract.WriteGasCostPerSlot + contract.ReadGasCostPerSlot
	ImportAVAXGasCost            uint64 = contract.WriteGasCostPerSlot + contract.ReadGasCostPerSlot
	ImportUTXOGasCost            uint64 = contract.WriteGasCostPerSlot + contract.ReadGasCostPerSlot
	GetNativeTokenAssetIDGasCost uint64 = 100 // Based off of sha256
)

// Singleton StatefulPrecompiledContract and signatures.
var (
	// SharedMemoryRawABI contains the raw ABI of SharedMemory contract.
	//go:embed contract.abi
	SharedMemoryRawABI string

	SharedMemoryABI = contract.ParseABI(SharedMemoryRawABI)

	SharedMemoryPrecompile = createSharedMemoryPrecompile()
)

type ExportAVAXInput struct {
	DestinationChainID [32]byte
	Locktime           uint64
	Threshold          uint64
	Addrs              []common.Address
}

type ExportUTXOInput struct {
	Amount             uint64
	DestinationChainID [32]byte
	Locktime           uint64
	Threshold          uint64
	Addrs              []common.Address
}

type ImportAVAXInput struct {
	SourceChain [32]byte
	UtxoID      [32]byte
}

type ImportUTXOInput struct {
	SourceChain [32]byte
	UtxoID      [32]byte
}

type ImportUTXOOutput struct {
	Amount    uint64
	Locktime  uint64
	Threshold uint64
	Addrs     []common.Address
}

// UnpackExportAVAXInput attempts to unpack [input] as ExportAVAXInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackExportAVAXInput(input []byte) (ExportAVAXInput, error) {
	inputStruct := ExportAVAXInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "exportAVAX", input)

	return inputStruct, err
}

// PackExportAVAX packs [inputStruct] of type ExportAVAXInput into the appropriate arguments for exportAVAX.
func PackExportAVAX(inputStruct ExportAVAXInput) ([]byte, error) {
	return SharedMemoryABI.Pack("exportAVAX", inputStruct.DestinationChainID, inputStruct.Locktime, inputStruct.Threshold, inputStruct.Addrs)
}

func exportAVAX(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ExportAVAXGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	inputStruct, err := UnpackExportAVAXInput(input)
	if err != nil {
		return nil, remainingGas, err
	}
	chainCtx := accessibleState.GetSnowContext()
	if err := verify.SameSubnet(context.TODO(), chainCtx, ids.ID(inputStruct.DestinationChainID)); err != nil {
		return nil, remainingGas, err
	}

	balance := accessibleState.GetStateDB().GetBalance(ContractAddress)
	accessibleState.GetStateDB().SubBalance(ContractAddress, balance)
	convertedBalance := balance.Div(balance, big.NewInt(1000000000)) // TODO: make var

	topics, data, err := SharedMemoryABI.PackEvent(
		"ExportAVAX",
		convertedBalance.Uint64(), // XXX validate this value
		inputStruct.DestinationChainID,
		inputStruct.Locktime,
		inputStruct.Threshold,
		inputStruct.Addrs,
	)
	if err != nil {
		return nil, remainingGas, err
	}
	accessibleState.GetStateDB().AddLog(ContractAddress, topics, data, accessibleState.GetBlockContext().Number().Uint64())

	// TODO: add atomic trie handling if we are going to keep it inside of the storage trie

	// Return an empty output and the remaining gas
	return []byte{}, remainingGas, nil
}

// UnpackExportUTXOInput attempts to unpack [input] as ExportUTXOInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackExportUTXOInput(input []byte) (ExportUTXOInput, error) {
	inputStruct := ExportUTXOInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "exportUTXO", input)

	return inputStruct, err
}

// PackExportUTXO packs [inputStruct] of type ExportUTXOInput into the appropriate arguments for exportUTXO.
func PackExportUTXO(inputStruct ExportUTXOInput) ([]byte, error) {
	return SharedMemoryABI.Pack("exportUTXO", inputStruct.Amount, inputStruct.DestinationChainID, inputStruct.Locktime, inputStruct.Threshold, inputStruct.Addrs)
}

func exportUTXO(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ExportUTXOGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ExportUTXOInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackExportUTXOInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	chainCtx := accessibleState.GetSnowContext()
	if err := verify.SameSubnet(context.TODO(), chainCtx, ids.ID(inputStruct.DestinationChainID)); err != nil {
		return nil, remainingGas, err
	}
	assetID := CalculateANTAssetID(common.Hash(chainCtx.ChainID), caller)

	topics, data, err := SharedMemoryABI.PackEvent(
		"ExportUTXO",
		inputStruct.Amount,
		inputStruct.DestinationChainID,
		assetID,
		inputStruct.Locktime,
		inputStruct.Threshold,
		inputStruct.Addrs,
	)
	if err != nil {
		return nil, remainingGas, err
	}
	accessibleState.GetStateDB().AddLog(ContractAddress, topics, data, accessibleState.GetBlockContext().Number().Uint64())

	// TODO: add atomic trie handling if we are going to keep it inside of the storage trie

	// Return an empty output and the remaining gas
	return []byte{}, remainingGas, nil
}

// UnpackGetNativeTokenAssetIDInput attempts to unpack [input] into the common.Address type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetNativeTokenAssetIDInput(input []byte) (common.Address, error) {
	res, err := SharedMemoryABI.UnpackInput("getNativeTokenAssetID", input)
	if err != nil {
		return common.Address{}, err
	}
	unpacked := *abi.ConvertType(res[0], new(common.Address)).(*common.Address)
	return unpacked, nil
}

// PackGetNativeTokenAssetID packs [caller] of type common.Address into the appropriate arguments for getNativeTokenAssetID.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetNativeTokenAssetID(caller common.Address) ([]byte, error) {
	return SharedMemoryABI.Pack("getNativeTokenAssetID", caller)
}

// PackGetNativeTokenAssetIDOutput attempts to pack given assetID of type [32]byte
// to conform the ABI outputs.
func PackGetNativeTokenAssetIDOutput(assetID [32]byte) ([]byte, error) {
	return SharedMemoryABI.PackOutput("getNativeTokenAssetID", assetID)
}

func getNativeTokenAssetID(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetNativeTokenAssetIDGasCost); err != nil {
		return nil, 0, err
	}
	// attempts to unpack [input] into the arguments to the GetNativeTokenAssetIDInput.
	// Assumes that [input] does not include selector
	address, err := UnpackGetNativeTokenAssetIDInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	assetID := CalculateANTAssetID(common.Hash(accessibleState.GetSnowContext().ChainID), address)
	packedOutput, err := PackGetNativeTokenAssetIDOutput(assetID)
	if err != nil {
		return nil, remainingGas, err
	}
	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackImportAVAXInput attempts to unpack [input] as ImportAVAXInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackImportAVAXInput(input []byte) (ImportAVAXInput, error) {
	inputStruct := ImportAVAXInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "importAVAX", input)

	return inputStruct, err
}

// PackImportAVAX packs [inputStruct] of type ImportAVAXInput into the appropriate arguments for importAVAX.
func PackImportAVAX(inputStruct ImportAVAXInput) ([]byte, error) {
	return SharedMemoryABI.Pack("importAVAX", inputStruct.SourceChain, inputStruct.UtxoID)
}

func importAVAX(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ImportAVAXGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ImportAVAXInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackImportAVAXInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	predicateBytes, exists := accessibleState.GetStateDB().GetPredicateStorageSlots(ContractAddress)
	if !exists {
		return nil, remainingGas, fmt.Errorf("no predicate available to import, caller %s, input: 0x%x, suppliedGas: %d", caller, input, suppliedGas)
	}

	atomicPredicate := new(AtomicPredicate)
	_, err = codec.Codec.Unmarshal(predicateBytes, atomicPredicate)
	// Note: this should never happen since this should be unmarshalled within the predicate verification
	if err != nil {
		return nil, remainingGas, fmt.Errorf("failed to unmarshal shared memory predicate: %w", err)
	}

	if atomicPredicate.SourceChain != inputStruct.SourceChain {
		return nil, remainingGas, fmt.Errorf("predicate source chain %s does not match specified source chain: %s", atomicPredicate.SourceChain, inputStruct.SourceChain)
	}

	var specifiedUTXO *avax.UTXO
	for _, utxo := range atomicPredicate.ImportedUTXOs {
		if utxo.ID == inputStruct.UtxoID {
			specifiedUTXO = utxo
			break
		}
	}
	if specifiedUTXO == nil {
		return nil, remainingGas, fmt.Errorf("failed to find UTXO %s in atomic predicate", inputStruct.UtxoID)
	}
	// TODO: check to see that the UTXO has not been marked as consumed within the statedb

	if avaxAssetID := accessibleState.GetSnowContext().AVAXAssetID; specifiedUTXO.AssetID() != avaxAssetID {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s specifies assetID %s, expected AVAXAssetID: %s", inputStruct.UtxoID, specifiedUTXO.AssetID(), avaxAssetID)
	}

	transferOut, ok := specifiedUTXO.Out.(*secp256k1fx.TransferOutput)
	if !ok {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s has wrong output type %T", specifiedUTXO.ID, specifiedUTXO.Out)
	}

	// Ensure that the locktime of the UTXO has passed
	if blockTimestamp := accessibleState.GetBlockContext().Timestamp().Uint64(); transferOut.Locktime > blockTimestamp {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s has a timestamp %d after current block timestamp %d", specifiedUTXO.ID, transferOut.Locktime, blockTimestamp)
	}
	// Confirm that the threshold is 1
	if transferOut.Threshold != 1 {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s specified invalid threshold", specifiedUTXO.ID)
	}
	validSpender := false
	for _, spender := range transferOut.Addrs {
		if spender == ids.ShortID(caller) {
			validSpender = true
			break
		}
	}
	if !validSpender {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s does not include msg.sender %s as a valid spender address", specifiedUTXO.ID, caller)
	}

	// Emit an ImportAVAX log to signal the OnAccept handler to consume the UTXO when the block is accepted
	topics, data, err := SharedMemoryABI.PackEvent(
		"ImportAVAX",
		transferOut.Amt, // Use the denomination 10^9
		inputStruct.SourceChain,
		specifiedUTXO.ID,
	)
	if err != nil {
		return nil, remainingGas, err
	}
	accessibleState.GetStateDB().AddLog(ContractAddress, topics, data, accessibleState.GetBlockContext().Number().Uint64())

	// Convert the specified amount to denomination 10^18 and increment the balance
	amount := big.NewInt(int64(transferOut.Amt))
	convertedAmount := amount.Mul(amount, big.NewInt(1000000000))
	accessibleState.GetStateDB().AddBalance(caller, convertedAmount)

	return []byte{}, remainingGas, nil
}

// UnpackImportUTXOInput attempts to unpack [input] as ImportUTXOInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackImportUTXOInput(input []byte) (ImportUTXOInput, error) {
	inputStruct := ImportUTXOInput{}
	err := SharedMemoryABI.UnpackInputIntoInterface(&inputStruct, "importUTXO", input)

	return inputStruct, err
}

// PackImportUTXOOutput attempts to pack given [outputStruct] of type ImportUTXOOutput
// to conform the ABI outputs.
func PackImportUTXOOutput(outputStruct ImportUTXOOutput) ([]byte, error) {
	return SharedMemoryABI.PackOutput("importUTXO",
		outputStruct.Amount,
		outputStruct.Locktime,
		outputStruct.Threshold,
		outputStruct.Addrs,
	)
}

func importUTXO(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ImportUTXOGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ImportUTXOInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackImportUTXOInput(input)
	if err != nil {
		return nil, remainingGas, err
	}
	predicateBytes, exists := accessibleState.GetStateDB().GetPredicateStorageSlots(ContractAddress)
	if !exists {
		return nil, remainingGas, fmt.Errorf("no predicate available to import, caller %s, input: 0x%x, suppliedGas: %d", caller, input, suppliedGas)
	}

	atomicPredicate := new(AtomicPredicate)
	_, err = codec.Codec.Unmarshal(predicateBytes, atomicPredicate)
	// Note: this should never happen since this should be unmarshalled within the predicate verification
	if err != nil {
		return nil, remainingGas, fmt.Errorf("failed to unmarshal shared memory predicate: %w", err)
	}

	if atomicPredicate.SourceChain != inputStruct.SourceChain {
		return nil, remainingGas, fmt.Errorf("predicate source chain %s does not match specified source chain: %s", atomicPredicate.SourceChain, inputStruct.SourceChain)
	}

	// Verify the UTXO named in the tx is specified in the predicate.
	// This ensures the UTXO is present in the shared memory if the VM
	// is bootstrapped so we do not need to check the shared memory here.
	// This allows for repeatible exeuction of the transaction, since either
	// - The VM is bootstrapped and this node verifies the predicate itself,
	//   which guarantees the UTXO is present in shared memory. Or,
	// - The VM is bootstrapping and it relies on the network's consensus to
	//   have properly verified the predicate at the time of execution.
	var specifiedUTXO *avax.UTXO
	for _, utxo := range atomicPredicate.ImportedUTXOs {
		if utxo.ID == inputStruct.UtxoID {
			specifiedUTXO = utxo
			break
		}
	}
	if specifiedUTXO == nil {
		return nil, remainingGas, fmt.Errorf("failed to find UTXO %s in atomic predicate", inputStruct.UtxoID)
	}
	// TODO: check to see that the UTXO has not been marked as consumed within the statedb

	if avaxAssetID := accessibleState.GetSnowContext().AVAXAssetID; specifiedUTXO.AssetID() == avaxAssetID {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s specifies AVAXAssetID %s which must be called with importAVAX", inputStruct.UtxoID, avaxAssetID)
	}

	transferOut, ok := specifiedUTXO.Out.(*secp256k1fx.TransferOutput)
	if !ok {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s has wrong output type %T", specifiedUTXO.ID, specifiedUTXO.Out)
	}

	// Ensure that the locktime of the UTXO has passed
	if blockTimestamp := accessibleState.GetBlockContext().Timestamp().Uint64(); transferOut.Locktime > blockTimestamp {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s has a timestamp %d after current block timestamp %d", specifiedUTXO.ID, transferOut.Locktime, blockTimestamp)
	}
	// Confirm that the threshold is 1
	if transferOut.Threshold != 1 {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s specified invalid threshold", specifiedUTXO.ID)
	}

	assetID := CalculateANTAssetID(common.Hash(accessibleState.GetSnowContext().ChainID), caller)
	if assetID == common.Hash(specifiedUTXO.AssetID()) {
		return nil, remainingGas, fmt.Errorf("specified UTXO %s specified incorrect assetID %s for caller %s, with actual assetID: %s", specifiedUTXO.ID, specifiedUTXO.AssetID(), caller, assetID)
	}

	// Emit an ImportAVAX log to signal the OnAccept handler to consume the UTXO when the block is accepted
	topics, data, err := SharedMemoryABI.PackEvent(
		"ImportUTXO",
		transferOut.Amt,
		inputStruct.SourceChain,
		specifiedUTXO.AssetID(),
		specifiedUTXO.ID,
	)
	if err != nil {
		return nil, remainingGas, err
	}
	accessibleState.GetStateDB().AddLog(ContractAddress, topics, data, accessibleState.GetBlockContext().Number().Uint64())

	addrs := make([]common.Address, 0, len(transferOut.Addrs))
	for _, addr := range transferOut.Addrs {
		addrs = append(addrs, common.Address(addr))
	}
	packedOutput, err := PackImportUTXOOutput(ImportUTXOOutput{
		Amount:    transferOut.Amt,
		Locktime:  transferOut.Locktime,
		Threshold: uint64(transferOut.Threshold),
		Addrs:     addrs,
	})
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createSharedMemoryPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
func createSharedMemoryPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"exportAVAX":            exportAVAX,
		"exportUTXO":            exportUTXO,
		"getNativeTokenAssetID": getNativeTokenAssetID,
		"importAVAX":            importAVAX,
		"importUTXO":            importUTXO,
	}

	for name, function := range abiFunctionMap {
		method, ok := SharedMemoryABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
