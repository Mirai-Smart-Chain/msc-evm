// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package warp

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/avalanchego/vms/platformvm/warp"
	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/rlp"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 0 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GetBlockchainIDGasCost        uint64 = 0 // SET A GAS COST HERE
	GetVerifiedWarpMessageGasCost uint64 = 0 // SET A GAS COST HERE
	SendWarpMessageGasCost        uint64 = 0 // SET A GAS COST HERE
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = errors.New
	_ = big.NewInt
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// WarpMessengerRawABI contains the raw ABI of WarpMessenger contract.
	//go:embed contract.abi
	WarpMessengerRawABI string

	WarpMessengerABI = contract.ParseABI(WarpMessengerRawABI)

	WarpMessengerPrecompile = createWarpMessengerPrecompile()

	SubmitMessageEventID = "da2b1cd3e6664863b4ad90f53a4e14fca9fc00f3f0e01e5c7b236a4355b6591a" // Keccack256("SubmitMessage(bytes32,uint256)")

	ErrMissingStorageSlots       = errors.New("missing access list storage slots from precompile during execution")
	ErrInvalidMessageIndex       = errors.New("invalid message index")
	ErrInvalidSignature          = errors.New("invalid aggregate signature")
	ErrMissingProposerVMBlockCtx = errors.New("missing proposer VM block context")
	ErrWrongChainID              = errors.New("wrong chain id")
	ErrInvalidQuorumDenominator  = errors.New("quorum denominator can not be zero")
	ErrGreaterQuorumNumerator    = errors.New("quorum numerator can not be greater than quorum denominator")
	ErrQuorumNilCheck            = errors.New("can not only set one of quorum numerator and denominator")
	ErrMissingPrecompileBackend  = errors.New("missing vm supported backend for precompile")
	ErrInvalidTopicHash          = func(topic common.Hash) error {
		return fmt.Errorf("expected hash %s for topic at zero index, but got %s", SubmitMessageEventID, topic.String())
	}
	ErrInvalidTopicCount = func(numTopics int) error {
		return fmt.Errorf("expected three topics but got %d", numTopics)
	}
)

// WarpMessage is an auto generated low-level Go binding around an user-defined struct.
type WarpMessage struct {
	OriginChainID       [32]byte
	OriginSenderAddress [32]byte
	DestinationChainID  [32]byte
	DestinationAddress  [32]byte
	Payload             []byte
}

type GetVerifiedWarpMessageOutput struct {
	Message WarpMessage
	Success bool
}

type SendWarpMessageInput struct {
	DestinationChainID [32]byte
	DestinationAddress [32]byte
	Payload            []byte
}

func VerifyPredicate(predicateContext *contract.PredicateContext, storageSlots []byte) error {
	// The proposer VM block context is required to verify aggregate signatures.
	if predicateContext.ProposerVMBlockCtx == nil {
		return ErrMissingProposerVMBlockCtx
	}

	// If there are no storage slots, we consider the predicate to be valid because
	// there are no messages to be received.
	if len(storageSlots) == 0 {
		return nil
	}

	// RLP decode the list of signed messages.
	var messagesBytes [][]byte
	err := rlp.DecodeBytes(storageSlots, &messagesBytes)
	if err != nil {
		return err
	}

	// TODO: save the parsed and verified warp messages to use in getVerifiedWarpMessage
	// Iterate and try to parse into warp signed messages, then verify each message's aggregate signature.
	for _, messageBytes := range messagesBytes {
		message, err := warp.ParseMessage(messageBytes)
		if err != nil {
			return err
		}

		// TODO: Should we add a special chain ID that is allowed as the "anycast" chain ID? Just need to think through if there are any security implications.
		if message.DestinationChainID != predicateContext.SnowCtx.ChainID {
			return ErrWrongChainID
		}

		// TODO: discussions around saving quorum numerator and denominator in state, and adding signature verification.
		//err = message.Signature.Verify(
		//	context.Background(),
		//	&message.UnsignedMessage,
		//	predicateContext.SnowCtx.ValidatorState,
		//	predicateContext.ProposerVMBlockCtx.PChainHeight,
		//	c.QuorumNumerator.Uint64(),
		//	c.QuorumDenominator.Uint64())
		//if err != nil {
		//	return err
		//}

	}

	return nil
}

// TODO: Implement Accepter interface
//func Accept(backend precompile.Backend, txHash common.Hash, logIndex int, topics []common.Hash, logData []byte) error {
//	if backend == nil {
//		return ErrMissingPrecompileBackend
//	}
//
//	if len(topics) != 3 {
//		return ErrInvalidTopicCount(len(topics))
//	}
//
//	if topics[0] != common.HexToHash(SubmitMessageEventID) {
//		return ErrInvalidTopicHash(topics[0])
//	}
//
//	unsignedMessage, err := warp.NewUnsignedMessage(
//		ids.ID(topics[1]),
//		ids.ID(topics[2]),
//		logData)
//	if err != nil {
//		return err
//	}
//
//	return backend.AddMessage(context.Background(), unsignedMessage)
//}

// PackGetBlockchainID packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetBlockchainID() ([]byte, error) {
	return WarpMessengerABI.Pack("getBlockchainID")
}

// PackGetBlockchainIDOutput attempts to pack given blockchainID of type [32]byte
// to conform the ABI outputs.
func PackGetBlockchainIDOutput(blockchainID [32]byte) ([]byte, error) {
	return WarpMessengerABI.PackOutput("getBlockchainID", blockchainID)
}

func getBlockchainID(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetBlockchainIDGasCost); err != nil {
		return nil, 0, err
	}

	packedOutput, err := PackGetBlockchainIDOutput(accessibleState.GetSnowContext().ChainID)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackGetVerifiedWarpMessageInput attempts to unpack [input] into the *big.Int type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGetVerifiedWarpMessageInput(input []byte) (*big.Int, error) {
	res, err := WarpMessengerABI.UnpackInput("getVerifiedWarpMessage", input)
	if err != nil {
		return big.NewInt(0), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

// PackGetVerifiedWarpMessage packs [messageIndex] of type *big.Int into the appropriate arguments for getVerifiedWarpMessage.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetVerifiedWarpMessage(messageIndex *big.Int) ([]byte, error) {
	return WarpMessengerABI.Pack("getVerifiedWarpMessage", messageIndex)
}

// PackGetVerifiedWarpMessageOutput attempts to pack given [outputStruct] of type GetVerifiedWarpMessageOutput
// to conform the ABI outputs.
func PackGetVerifiedWarpMessageOutput(outputStruct GetVerifiedWarpMessageOutput) ([]byte, error) {
	return WarpMessengerABI.PackOutput("getVerifiedWarpMessage",
		outputStruct.Message,
		outputStruct.Success,
	)
}

func getVerifiedWarpMessage(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetVerifiedWarpMessageGasCost); err != nil {
		return nil, 0, err
	}

	// attempts to unpack [input] into the arguments to the GetVerifiedWarpMessageInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [messageIndex] variable in your code
	inputIndex, err := UnpackGetVerifiedWarpMessageInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	_, exists := accessibleState.GetStateDB().GetPredicateStorageSlots(ContractAddress)
	if !exists {
		return nil, remainingGas, ErrMissingStorageSlots
	}

	// Check that the message index exists.
	if !inputIndex.IsInt64() {
		return nil, remainingGas, ErrInvalidMessageIndex
	}

	// TODO: Get the requested warp message from previously parsed/verified messages in predicate.
	// TODO: Unmarshal the already verified message into warp message to return as output.
	//messageIndex := inputIndex.Int64()
	//if len(signedMessages) <= int(messageIndex) {
	//	return nil, remainingGas, ErrInvalidMessageIndex
	//}
	//
	//// Parse the raw message to be processed.
	//message := signedMessages[messageIndex]
	//
	var warpMessage WarpMessage
	//_, err = Codec.Unmarshal(message.Payload, &warpMessage)
	//if err != nil {
	//	return nil, remainingGas, err
	//}

	output := GetVerifiedWarpMessageOutput{
		Message: warpMessage,
		Success: true,
	}

	packedOutput, err := PackGetVerifiedWarpMessageOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackSendWarpMessageInput attempts to unpack [input] as SendWarpMessageInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackSendWarpMessageInput(input []byte) (SendWarpMessageInput, error) {
	inputStruct := SendWarpMessageInput{}
	err := WarpMessengerABI.UnpackInputIntoInterface(&inputStruct, "sendWarpMessage", input)

	return inputStruct, err
}

// PackSendWarpMessage packs [inputStruct] of type SendWarpMessageInput into the appropriate arguments for sendWarpMessage.
func PackSendWarpMessage(inputStruct SendWarpMessageInput) ([]byte, error) {
	return WarpMessengerABI.Pack("sendWarpMessage", inputStruct.DestinationChainID, inputStruct.DestinationAddress, inputStruct.Payload)
}

func sendWarpMessage(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, SendWarpMessageGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the SendWarpMessageInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackSendWarpMessageInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	message := &WarpMessage{
		OriginChainID:       accessibleState.GetSnowContext().ChainID,
		OriginSenderAddress: caller.Hash(),
		DestinationChainID:  inputStruct.DestinationChainID,
		DestinationAddress:  inputStruct.DestinationAddress,
		Payload:             inputStruct.Payload,
	}

	// Marshal
	//data, err := Codec.Marshal(Version, message)
	//if err != nil {
	//	return nil, remainingGas, err
	//}
	var data []byte

	accessibleState.GetStateDB().AddLog(
		ContractAddress,
		[]common.Hash{
			common.HexToHash(SubmitMessageEventID),
			message.OriginChainID,
			message.DestinationChainID,
		},
		data,
		accessibleState.GetBlockContext().Number().Uint64())

	return []byte{}, remainingGas, nil
}

// createWarpMessengerPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
func createWarpMessengerPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"getBlockchainID":        getBlockchainID,
		"getVerifiedWarpMessage": getVerifiedWarpMessage,
		"sendWarpMessage":        sendWarpMessage,
	}

	for name, function := range abiFunctionMap {
		method, ok := WarpMessengerABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
