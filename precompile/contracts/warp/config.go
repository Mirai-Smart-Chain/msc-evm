// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package warp

import (
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/precompile/precompileconfig"
)

const (
	QuorumDenominator      uint64 = 100
	DefaultQuorumNumerator uint64 = 67
)

var _ precompileconfig.Config = &Config{}

// Config implements the precompileconfig.Config interface and
// adds specific configuration for WarpMessenger.
type Config struct {
	precompileconfig.Upgrade
	QuorumNumerator uint64 `json:"quorumNumerator,omitempty"`
}

// NewConfig returns a config for a network upgrade at [blockTimestamp] that enables
// WarpMessenger.
func NewConfig(blockTimestamp *big.Int, quorumNumerator uint64) *Config {
	return &Config{
		Upgrade:         precompileconfig.Upgrade{BlockTimestamp: blockTimestamp},
		QuorumNumerator: quorumNumerator,
	}
}

// NewDisableConfig returns config for a network upgrade at [blockTimestamp]
// that disables WarpMessenger.
func NewDisableConfig(blockTimestamp *big.Int) *Config {
	return &Config{
		Upgrade: precompileconfig.Upgrade{
			BlockTimestamp: blockTimestamp,
			Disable:        true,
		},
	}
}

// Key returns the key for the WarpMessenger precompileconfig.
// This should be the same key as used in the precompile module.
func (*Config) Key() string { return ConfigKey }

// Verify tries to verify Config and returns an error accordingly.
func (c *Config) Verify() error {
	switch {
	case c.QuorumNumerator == 0: // If the numerator is 0, treat as default option.
		return nil
	case c.QuorumNumerator > 100:
		return fmt.Errorf("cannot use quorum numerator greater than 100: %d", c.QuorumNumerator)
	case c.QuorumNumerator < 51:
		return fmt.Errorf("cannot use quorum numerator < 51: %d", c.QuorumNumerator)
	default:
		return nil
	}
}

// Equal returns true if [s] is a [*Config] and it has been configured identical to [c].
func (c *Config) Equal(s precompileconfig.Config) bool {
	// typecast before comparison
	other, ok := (s).(*Config)
	if !ok {
		return false
	}
	equals := c.Upgrade.Equal(&other.Upgrade)
	if !equals {
		return false
	}

	return c.QuorumNumerator == other.QuorumNumerator
}
