// Code generated
// This file is a generated precompile contract test with the skeleton of test functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package helloworld

import (
	"testing"

	"github.com/ava-labs/subnet-evm/core/state"
	"github.com/ava-labs/subnet-evm/precompile/allowlist"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/precompile/testutils"
	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
)

func TestHelloWorld(t *testing.T) {
	testGreeting := "test"
	tests := map[string]testutils.PrecompileTest{
		"calling sayHello from NoRole should succeed": {
			Caller:     allowlist.TestNoRoleAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				input, err := PackSayHello()
				require.NoError(t, err)
				return input
			},
			Config: NewConfig(common.Big0, nil, nil), // give a zero config for immediate activation
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {
				res, err := PackSayHelloOutput(defaultGreeting)
				require.NoError(t, err)
				return res
			}(),
			SuppliedGas: SayHelloGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling sayHello from Enabled should succeed": {
			Caller:     allowlist.TestEnabledAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				input, err := PackSayHello()
				require.NoError(t, err)
				return input
			},
			Config: NewConfig(common.Big0, nil, nil), // give a zero config for immediate activation
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {
				res, err := PackSayHelloOutput(defaultGreeting)
				require.NoError(t, err)
				return res
			}(),
			SuppliedGas: SayHelloGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"calling sayHello from Admin should succeed": {
			Caller:     allowlist.TestAdminAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				input, err := PackSayHello()
				require.NoError(t, err)
				return input
			},
			Config: NewConfig(common.Big0, nil, nil), // give a zero config for immediate activation
			// This test is for a successful call. You can set the expected output here.
			// CUSTOM CODE STARTS HERE
			ExpectedRes: func() []byte {
				res, err := PackSayHelloOutput(defaultGreeting)
				require.NoError(t, err)
				return res
			}(),
			SuppliedGas: SayHelloGasCost,
			ReadOnly:    false,
			ExpectedErr: "",
		},
		"insufficient gas for sayHello should fail": {
			Caller: common.Address{1},
			InputFn: func(t *testing.T) []byte {
				input, err := PackSayHello()
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SayHelloGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		"calling setGreeting from NoRole should fail": {
			Caller:     allowlist.TestNoRoleAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				var testInput string
				input, err := PackSetGreeting(testInput)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SetGreetingGasCost,
			ReadOnly:    false,
			ExpectedErr: ErrCannotSetGreeting.Error(),
		},
		"calling setGreeting from Enabled should succeed": {
			Caller:     allowlist.TestEnabledAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				input, err := PackSetGreeting(testGreeting)
				require.NoError(t, err)

				return input
			},
			ExpectedRes: []byte{},
			SuppliedGas: SetGreetingGasCost,
			ReadOnly:    false,
			AfterHook: func(t *testing.T, state contract.StateDB) {
				greeting := GetGreeting(state)
				require.Equal(t, greeting, testGreeting)
			},
		},
		"calling setGreeting from Admin should succeed": {
			Caller:     allowlist.TestAdminAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				input, err := PackSetGreeting(testGreeting)
				require.NoError(t, err)

				return input
			},
			ExpectedRes: []byte{},
			SuppliedGas: SetGreetingGasCost,
			ReadOnly:    false,
			AfterHook: func(t *testing.T, state contract.StateDB) {
				greeting := GetGreeting(state)
				require.Equal(t, greeting, testGreeting)
			},
		},
		"readOnly setGreeting should fail": {
			Caller: common.Address{1},
			InputFn: func(t *testing.T) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				input, err := PackSetGreeting(testGreeting)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SetGreetingGasCost,
			ReadOnly:    true,
			ExpectedErr: vmerrs.ErrWriteProtection.Error(),
		},
		"insufficient gas for setGreeting should fail": {
			Caller: common.Address{1},
			InputFn: func(t *testing.T) []byte {
				// CUSTOM CODE STARTS HERE
				// set test input to a value here
				input, err := PackSetGreeting(testGreeting)
				require.NoError(t, err)
				return input
			},
			SuppliedGas: SetGreetingGasCost - 1,
			ReadOnly:    false,
			ExpectedErr: vmerrs.ErrOutOfGas.Error(),
		},
		// Adding some custom tests
		"set a very long greeting from enabled address": {
			Caller:     allowlist.TestEnabledAddr,
			BeforeHook: allowlist.SetDefaultRoles(Module.Address),
			InputFn: func(t *testing.T) []byte {
				longString := "a very long string that is longer than 32 bytes and will cause an error"
				input, err := PackSetGreeting(longString)
				require.NoError(t, err)

				return input
			},
			SuppliedGas: SetGreetingGasCost,
			ReadOnly:    false,
			ExpectedErr: ErrInputExceedsLimit.Error(),
		},
		"store greeting then say hello from non-enabled address": {
			Caller: allowlist.TestNoRoleAddr,
			BeforeHook: func(t *testing.T, state contract.StateDB) {
				allowlist.SetDefaultRoles(Module.Address)(t, state)
				StoreGreeting(state, testGreeting)
			},
			InputFn: func(t *testing.T) []byte {
				input, err := PackSayHello()
				require.NoError(t, err)

				return input
			},
			SuppliedGas: SayHelloGasCost,
			ReadOnly:    true,
			ExpectedRes: func() []byte {
				res, err := PackSayHelloOutput(testGreeting)
				require.NoError(t, err)
				return res
			}(),
		},
	}
	// Run tests with allow list tests.
	// This adds allowlist run tests to your custom tests
	// and runs them all together.
	// Even if you don't add any custom tests, keep this. This will still
	// run the default allowlist tests.
	allowlist.RunPrecompileWithAllowListTests(t, Module, state.NewTestStateDB, tests)
}
