// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package params

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*stateUpgradeAccountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s StateUpgradeAccount) MarshalJSON() ([]byte, error) {
	type StateUpgradeAccount struct {
		Code          hexutil.Bytes               `json:"code,omitempty"`
		Storage       map[storageJSON]storageJSON `json:"storage,omitempty"`
		BalanceChange *SignedHexOrDecimal256      `json:"balanceChange,omitempty"`
	}
	var enc StateUpgradeAccount
	enc.Code = s.Code
	if s.Storage != nil {
		enc.Storage = make(map[storageJSON]storageJSON, len(s.Storage))
		for k, v := range s.Storage {
			enc.Storage[storageJSON(k)] = storageJSON(v)
		}
	}
	enc.BalanceChange = (*SignedHexOrDecimal256)(s.BalanceChange)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *StateUpgradeAccount) UnmarshalJSON(input []byte) error {
	type StateUpgradeAccount struct {
		Code          *hexutil.Bytes              `json:"code,omitempty"`
		Storage       map[storageJSON]storageJSON `json:"storage,omitempty"`
		BalanceChange *SignedHexOrDecimal256      `json:"balanceChange,omitempty"`
	}
	var dec StateUpgradeAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Code != nil {
		s.Code = *dec.Code
	}
	if dec.Storage != nil {
		s.Storage = make(map[common.Hash]common.Hash, len(dec.Storage))
		for k, v := range dec.Storage {
			s.Storage[common.Hash(k)] = common.Hash(v)
		}
	}
	if dec.BalanceChange != nil {
		s.BalanceChange = (*big.Int)(dec.BalanceChange)
	}
	return nil
}
